//file:noinspection GroovyAssignabilityCheck

buildscript {
    ext {
        kotlinVersion = '1.6.0'
        springBootVersion = '2.7.1'
        jacksonVersion = '2.12.2'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") {
            exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
        }
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath "com.github.ben-manes:gradle-versions-plugin:0.36.0"
        classpath 'gradle.plugin.com.google.protobuf:protobuf-gradle-plugin:0.8.18'
        classpath 'org.ajoberstar.grgit:grgit-core:4.1.1'
        classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
    }
}

buildscript {
    configurations['classpath'].resolutionStrategy.eachDependency {
        if (requested.group == 'org.jooq') {
            useVersion '3.14.8'
        }
    }
}

plugins {
    id 'nu.studer.jooq' version '6.0.1'
    id 'org.ajoberstar.grgit' version '4.1.1'

}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.google.protobuf'
apply plugin: "kotlin-allopen"

sourceSets.main.java.srcDirs = [
        "src/main/java",
        "build/generated-src/protobuf/main/java",
        "build/generated-src/jooq"
]

group = 'z8.mctrl'
sourceCompatibility = '9'

def props = new Properties()
props.load(new FileReader("z8-mctrl.properties"))

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {

    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation ("org.mockito.kotlin:mockito-kotlin:4.0.0") {
        exclude(group: "org.mockito", module: "mockito-core")
    }
    testImplementation 'org.mockito:mockito-inline:4.6.1'


    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
    }
    //implementation("org.joinfaces:primefaces-spring-boot-starter:4.6.8") {
    //    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
    //}
    implementation('org.springframework.boot:spring-boot-starter-jooq') {
        exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
    }

    implementation group: 'org.jetbrains.exposed', name: 'exposed-core', version: '0.38.2'
    runtimeOnly group: 'org.jetbrains.exposed', name: 'exposed-jdbc', version: '0.38.2'
    implementation group: 'org.jetbrains.exposed', name: 'exposed-dao', version: '0.38.2'
    implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.7.5'
    implementation 'io.github.microutils:kotlin-logging-jvm:2.1.20'
    implementation 'at.favre.lib:bcrypt:0.9.0'
    implementation 'com.github.adminfaces:admin-theme:1.0.0'

    compile 'org.redisson:redisson:3.17.4'
    implementation 'org.reflections:reflections:0.10.2'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.5.21'
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.0.5'

    jooqGenerator 'org.mariadb.jdbc:mariadb-java-client:3.0.5'
    jooqGenerator project(':jooq-generator')

    implementation 'org.jooq:jooq-meta:3.14.8'
    implementation "org.springframework.boot:spring-boot-starter-log4j2:${springBootVersion}"
    implementation 'com.google.protobuf:protobuf-java:3.21.1'
    implementation 'io.grpc:grpc-stub:1.0.0-pre2'
    implementation 'io.grpc:grpc-protobuf:1.0.0-pre2'
    implementation 'org.java-websocket:Java-WebSocket:1.5.3'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'com.github.EDumdum:iso-7064-java:1.0.0'
    implementation 'org.jasypt:jasypt:1.9.3'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'
    implementation('org.joinfaces:butterfaces-spring-boot-starter:4.7.1') {
        exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
    }
    implementation 'com.paypal.sdk:checkout-sdk:2.0.0'

    implementation 'com.konghq:unirest-java:3.13.10'

    implementation 'javax.inject:javax.inject:1'
    implementation 'io.nayuki:qrcodegen:1.8.0'

    implementation 'org.jooq:jooq-codegen:3.16.7'

    if (JavaVersion.current().isJava9Compatible()) {
        implementation 'javax.annotation:javax.annotation-api:1.3.1'
    }

}

task prepareProtocol {
    dependsOn
    doLast {
        println("Collecting protocol...")
        def z8protoDir = "$buildDir/z8-proto"
        delete(z8protoDir)
        //noinspection GroovyAccessibility
        org.ajoberstar.grgit.Grgit.clone(
                dir: z8protoDir, uri: "https://github.com/jonasborn/z8-proto.git"
        )
        println("Repository cloned!")
        println("Modifying file...")
        def file = new File('build/z8-proto/z8-alpha.proto')
        def newConfig = file.text.replaceAll("import.*", "")
        newConfig = newConfig.replaceAll("option.*nanopb.*", "")
        newConfig = newConfig.replaceAll("\\s+\\[.*\\]", "")
        file.text = newConfig
        println("File modified!")
    }
}
tasks.whenObjectAdded { if (it.getName() == "extractIncludeProto") it.dependsOn(prepareProtocol) }


jooq {
    // use jOOQ version defined in Spring Boot
    version = dependencyManagement.importedProperties['jooq.version']
    //noinspection GroovyAccessibility
    edition = nu.studer.gradle.jooq.JooqEdition.OSS

    configurations {
        main {
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = props.get("database.build.driver") as String
                    url = (props.get("database.driver", "jdbc:mariadb") as String) + "://" +
                            (props.get("database.host", "localhost") as String) + ":" +
                            (props.get("database.port", 3306) as String) + "/"
                    user = props.get("database.user") as String
                    password = props.get("database.password") as String
                }
                generator {
                    name = "org.jooq.codegen.JavaGenerator"
                    database {
                        name = props.get("database.build.jooq.driver") as String
                        inputSchema = props.get("database.name") as String
                        forcedTypes {
                            forcedType {
                                userType = 'z8.mctrl.db.forced.PaymentRequestStatus'
                                enumConverter = true
                                includeExpression = 'PAYMENTREQUEST\\.STATUS'
                            }
                            forcedType {
                                userType = 'z8.mctrl.db.forced.PaymentProvider'
                                enumConverter = true
                                includeExpression = 'PAYOUT\\.TARGET'
                            }
                            forcedType {
                                userType = 'z8.mctrl.db.forced.PaymentProvider'
                                enumConverter = true
                                includeExpression = 'DEPOSIT\\.ORIGIN'
                            }
                            forcedType {
                                userType = 'z8.mctrl.db.forced.TokenAction'
                                enumConverter = true
                                includeExpression = 'TOKENACTION\\.ACTION'
                            }
                        }
                    }
                    target {
                        packageName = "z8.mctrl.jooq"
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = false
                        fluentSetters = true
                        daos = true
                    }

                    strategy.name = 'z8.mctrl.db.jooq.generator.CustomJooqGenerator'
                }
            }
        }
    }
}


sourceSets {
    main {
        proto {
            srcDir 'build/z8-proto'
        }
    }

}

protobuf {

    generatedFilesBaseDir = 'build/generated-src/protobuf'

    protoc {
        // The artifact spec for the Protobuf Compiler
        artifact = 'com.google.protobuf:protoc:3.21.1'
    }
    //noinspection GroovyAssignabilityCheck
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.0.0-pre2'
        }
    }
    generateProtoTasks {
        ofSourceSet('main')*.plugins {
            grpc {}
        }
    }
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '9'
    }
}


